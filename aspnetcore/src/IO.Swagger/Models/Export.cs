/*
 * resourced
 *
 * This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: v1.0.0.1
 * Contact: vespergu@tvunetworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Export : IEquatable<Export>
    { 
        /// <summary>
        /// the name of service caller. &#x60;mma&#x60; or &#x60;search&#x60;.
        /// </summary>
        /// <value>the name of service caller. &#x60;mma&#x60; or &#x60;search&#x60;.</value>
        [Required]
        [DataMember(Name="ServiceCaller")]
        public string ServiceCaller { get; set; }

        /// <summary>
        /// in millisecond. Get from Search API.
        /// </summary>
        /// <value>in millisecond. Get from Search API.</value>
        [Required]
        [DataMember(Name="StartPos")]
        public long? StartPos { get; set; }

        /// <summary>
        /// in millisecond. Relative time of mark.
        /// </summary>
        /// <value>in millisecond. Relative time of mark.</value>
        [DataMember(Name="StartTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// in millisecond
        /// </summary>
        /// <value>in millisecond</value>
        [DataMember(Name="Duration")]
        public long? Duration { get; set; }

        /// <summary>
        /// this field decides whether generate file or not when API is invoked. You can use &#x60;false&#x60; to get the thumbnail of the first frame. The default value is &#x60;false&#x60;
        /// </summary>
        /// <value>this field decides whether generate file or not when API is invoked. You can use &#x60;false&#x60; to get the thumbnail of the first frame. The default value is &#x60;false&#x60;</value>
        [DataMember(Name="FetchMedia")]
        public bool? FetchMedia { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Export {\n");
            sb.Append("  ServiceCaller: ").Append(ServiceCaller).Append("\n");
            sb.Append("  StartPos: ").Append(StartPos).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  FetchMedia: ").Append(FetchMedia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Export)obj);
        }

        /// <summary>
        /// Returns true if Export instances are equal
        /// </summary>
        /// <param name="other">Instance of Export to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Export other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServiceCaller == other.ServiceCaller ||
                    ServiceCaller != null &&
                    ServiceCaller.Equals(other.ServiceCaller)
                ) && 
                (
                    StartPos == other.StartPos ||
                    StartPos != null &&
                    StartPos.Equals(other.StartPos)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    FetchMedia == other.FetchMedia ||
                    FetchMedia != null &&
                    FetchMedia.Equals(other.FetchMedia)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServiceCaller != null)
                    hashCode = hashCode * 59 + ServiceCaller.GetHashCode();
                    if (StartPos != null)
                    hashCode = hashCode * 59 + StartPos.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    if (FetchMedia != null)
                    hashCode = hashCode * 59 + FetchMedia.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Export left, Export right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Export left, Export right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
